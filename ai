import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
import google.generativeai as genai

# Initialize Google Generative AI
genai.configure(api_key='AIzaSyD87R8KSnF5uzCnudTbWgg7_mWFQnOUbzM')
model = genai.GenerativeModel('models/gemini-1.5-flash')

# Your Telegram bot API token
API_TOKEN = '7647426186:AAFXlhdjmU4gsa99AeMJlI_QtKalWf14tr8'

# Function to handle the /start command
async def start(update: Update, context):
    await update.message.reply_text('Hi there!ðŸ‘‹ I am your AI companion. What are you interested in?')

# Handle incoming messages
async def handle_message(update: Update, context):
    user_message = update.message.text

    # Check for game initiation
    if "play a game" in user_message.lower():
        game_type = user_message.lower().split("play a game ")[-1].strip()
        if game_type in ["word game", "trivia", "memory game"]:
            context.user_data["game_type"] = game_type
            context.user_data["round"] = 1
            response = f"Okay, let's play {game_type}! I'm ready for round 1. What's your first guess?"
        else:
            response = "I'm not sure how to play that game yet. Let's try something else!"
    else:
        # Generate response using Google Generative AI
        conversation_history = "Conversation History:\n"
        for message in context.user_data.get("messages", []):
            conversation_history += f"[{message['role']}]: {message['content']}\n"
        
        try:
            response1 = model.generate_content([
                """You are a friendly and engaging AI companion designed specifically for older adults. Your goal is to provide companionship, support, and mental stimulation. You will:
                - Engage in conversation naturally and continue previous conversations.
                - Be sensitive and supportive. Help with word games, trivia, etc.""",
                f"Conversation History: {conversation_history}",
                f"User message: {user_message}"
            ])
            response = response1.text
        except Exception as e:
            response = "Sorry, I couldn't come up with a response at the moment."

    # Store the message in user context
    context.user_data["messages"] = context.user_data.get("messages", [])
    context.user_data["messages"].append({"role": "user", "content": user_message})
    context.user_data["messages"].append({"role": "assistant", "content": response})

    # Send response
    await update.message.reply_text(response)

    # Game Logic for Word Game
    if "game_type" in context.user_data and context.user_data["game_type"] == "word game":
        round_num = context.user_data.get("round", 1)
        if round_num == 1:
            context.user_data["word"] = "apple"  # Start with a word
            await update.message.reply_text("I'm thinking of a word that starts with 'a'. Can you guess what it is?")
        else:
            if user_message.lower() == context.user_data["word"]:
                await update.message.reply_text("That's right! You guessed the word. Do you want to play another round?")
                context.user_data["round"] += 1
            else:
                await update.message.reply_text("That's not quite right. Try again.")

# Main function to start the bot
async def main():
    # Create the Application and pass it your bot's token
    app = ApplicationBuilder().token(API_TOKEN).build()

    # Register the /start command
    app.add_handler(CommandHandler("start", start))

    # Register a handler for regular messages
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start polling for updates (this also includes idle behavior)
    await app.initialize()
    await app.start()
    print("Bot is running...")
    while True:
        await asyncio.sleep(1)

# Ensure we use the event loop that's already running
await main()
